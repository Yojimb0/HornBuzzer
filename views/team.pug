extends layout.pug

block content

	header
		h1 Team #[em= team]

	section.team

		.buzz-container
			button.buzz
				img(src="/horn.svg")

block scripts

	script(src="/socket.io/socket.io.js")

	script.
		var team = "#{team}";
		var playBackRate = #{Math.random() + .7};
		var socket = io();
		var buzz = document.querySelector('.buzz');
		var toast = document.querySelector('.toast');
		var hornInstance;

		var start = function(e){
			if(!!e == true) e.preventDefault();
			document.body.setAttribute('buzzing', true);
			hornInstance.start();
			socket.emit('buzz', team);
		}

		var stop = function(e){
			if(!!e == true) e.preventDefault();
			hornInstance.stop();
		}

		var horn = function(){
			var audioSrc = '/AIRHORN.mp3';
			var audioCtx = new (window.AudioContext || window.webkitAudioContext);
			var buffer;
			var source;
			var currentlyPlaying = 0;

			return {
				init: function(){
					this.loadSound(function(decodedBuffer) {
						buffer = decodedBuffer;
					});
				},
				loadSound: function(cb){
					if(!!buffer == true) { cb(buffer); return; }

					var xhr = new XMLHttpRequest();
					xhr.onload = function() {
						audioCtx.decodeAudioData(xhr.response, function(decodedBuffer) { cb(decodedBuffer); });
					};
					xhr.open('GET', audioSrc);
					xhr.responseType = 'arraybuffer';
					xhr.send();
				},
				start: function(){
					self = this;
					this.loadSound(function(tmpBuffer) {
						currentlyPlaying += 1;
						source = audioCtx.createBufferSource();
						source.connect(audioCtx.destination);
						source.buffer = tmpBuffer;
						source.onended = function () {
							currentlyPlaying -= 1;
							self.stop();
							if(currentlyPlaying == 0) self.stopWiggle();
						};

						source.start(0);
						source.playbackRate.value = playBackRate;
						source.loop = false;
						source.loopStart = 0;
						source.loopEnd = 0.15;
					});
				},
				stop: function(){
					if(!!source === true) source.loop = false;
				},
				stopWiggle: function(){
					document.body.setAttribute('buzzing', false);
				}
			}
		};

		hornInstance = horn();
		hornInstance.init();

		buzz.addEventListener('mousedown', start);
		buzz.addEventListener('touchstart', start);

		document.documentElement.addEventListener('mouseup', stop);
		document.documentElement.addEventListener('touchend', stop);

		socket.on('winner', function(respondingTeams){
			console.log('Responding teams :', respondingTeams, team);
			if(respondingTeams[0].team == team){
				document.body.setAttribute('state', 'winner');
				toast.innerHTML = 'You got this one !!<br>What\'s your answer ?';
				return
			}
			document.body.setAttribute('state', 'loser');
			toast.innerHTML = '<strong>' + respondingTeams[0].team + '</strong> team was faster';
		});

		socket.on('resetClients', function(){
			console.log('Resetting state');
			document.body.setAttribute('state', 'waiting');
			toast.innerHTML = '';
		});

		

